#!/usr/bin/env python
# -*- coding: utf-8 -*-
import os
import sys
sys.path.insert(0,os.path.dirname(__file__))
import re
import time
from toughradius.common import choosereactor
choosereactor.install_optimal_reactor(False)
import sys,signal,click
import platform as pf
from twisted.internet import reactor
from twisted.python import log
from toughradius.common import config as iconfig
from toughradius.common import dispatch,logger,utils
from toughradius.common.dbengine import get_engine
from toughradius.manage import settings
from toughradius.manage.settings import redis_conf
from toughradius.common import log_trace
from toughradius import __version__
from supervisor.supervisord import main as superd
from supervisor.supervisorctl import main as superctl
import traceback

reactor.suggestThreadPoolSize(30)

RUNDIR=os.path.dirname(__file__)
radius_conf = '%s/etc/toughradius.conf'%RUNDIR
radius_json = '%s/etc/toughradius.json'%RUNDIR

def setup_logger(config):
    syslog = logger.Logger(config,'radius')
    dispatch.register(syslog)
    log.startLoggingWithObserver(syslog.emit, setStdout=0)
    return syslog

def update_timezone(config):
    if 'TZ' not in os.environ:
        os.environ["TZ"] = config.system.tz
    try:time.tzset()
    except:pass

def reactor_run():
    def ExitHandler(signum, stackframe):
        print "Got signal: %s" % signum
        reactor.callFromThread(reactor.stop)
    signal.signal(signal.SIGTERM, ExitHandler)
    reactor.run()

def print_version(ctx, param, value):
    if not value or ctx.resilient_parsing:
        return
    click.echo(click.style("ToughRADIUS {0}".format(__version__),fg='cyan'))
    ctx.exit()

def print_info(ctx, param, value):
    if not value or ctx.resilient_parsing:
        return
    click.echo(click.style("Linux distribution: {0}".format(','.join(pf.linux_distribution())),fg='cyan'))
    click.echo(click.style("ToughRadius version: {0}".format(__version__),fg='cyan'))
    click.echo(click.style("Env_home: {0}".format(os.environ.get("HOME")),fg='cyan'))
    click.echo(click.style("Env_path: {0}".format(os.environ.get("PATH")),fg='cyan'))
    click.echo(click.style("Server platform: {0},{1}".format(pf.platform(),pf.machine()),fg='cyan'))
    click.echo(click.style("Python version: {0},{1}".format(pf.python_implementation(), pf.python_version()),fg='cyan'))
    ctx.exit()


@click.group()
@click.option('--version', is_flag=True, callback=print_version,expose_value=False, is_eager=True)
@click.option('--info', is_flag=True, callback=print_info,expose_value=False, is_eager=True, help="server info")
def cli():
    pass


@click.command()
@click.option('-c','--conf', default=radius_json, help='config file')
@click.option('-d','--debug', is_flag=True)
@click.option('-t','--start-taskd', is_flag=True, help="start taskd process")
def manage(conf,debug,start_taskd):
    """ start manage console """
    from toughradius import httpd
    from toughradius import taskd
    config = iconfig.find_config(conf)
    update_timezone(config)
    if debug:
        config.system.debug = True
    dbengine = get_engine(config)
    setup_logger(config)
    httpd.run(config,dbengine)
    if start_taskd:
        taskd.run(config,dbengine)
    reactor_run()


@click.command()
@click.option('-c','--conf', default=radius_json, help='config file')
@click.option('-d','--debug', is_flag=True)
@click.option('-auth','--start-auth', is_flag=True, help="start radisu auth listen process")
@click.option('-acct','--start-acct', is_flag=True, help="start radius acct listen process")
@click.option('-worker','--start-worker', is_flag=True, help="start radius worker process")
def radiusd(conf,debug,start_auth,start_acct,start_worker):
    """ start radius service """
    from toughradius import radiusd
    from toughradius import taskd
    from toughradius.common.redis_cache import CacheManager
    config = iconfig.find_config(conf)
    update_timezone(config)
    if debug:
        config.system.debug = True
    dbengine = get_engine(config)
    cache = CacheManager(redis_conf(config),cache_name='RadiusCache')
    aes = utils.AESCipher(key=config.system.secret)
    log = setup_logger(config)
    if start_auth:
        radiusd.run_auth(config)
    if start_acct:
        radiusd.run_acct(config)
    if start_worker:
        radiusd.run_worker(config,dbengine,cache=cache,aes=aes,standalone=True)
    reactor_run()



@click.command()
@click.option('-c','--conf', default=radius_json, help='config file')
@click.option('-d','--debug', is_flag=True)
def task(conf,debug):
    """ start tasks """
    from toughradius import taskd
    config = iconfig.find_config(conf)
    update_timezone(config)
    if debug:
        config.system.debug = True
    dbengine = get_engine(config)
    setup_logger(config)
    taskd.run(config,dbengine)
    reactor_run()


@click.command()
@click.option('-c','--conf', default=radius_json, help='config file')
@click.option('-d','--debug', is_flag=True)
def auth(conf,debug):
    """ start auth listen """
    from toughradius import radiusd
    config = iconfig.find_config(conf)
    update_timezone(config)
    if debug:
        config.system.debug = True
    dbengine = get_engine(config)
    setup_logger(config)
    radiusd.run_auth(config)
    reactor_run()


@click.command()
@click.option('-c','--conf', default=radius_json, help='config file')
@click.option('-d','--debug', is_flag=True)
def acct(conf,debug):
    """ start acct listen """
    from toughradius import radiusd
    config = iconfig.find_config(conf)
    update_timezone(config)
    if debug:
        config.system.debug = True
    dbengine = get_engine(config)
    setup_logger(config)
    radiusd.run_acct(config)
    reactor_run()


@click.command()
@click.option('-c','--conf', default=radius_json, help='config file')
@click.option('-d','--debug', is_flag=True)
@click.option('-n','--num', default=2,type=click.INT)
def worker(conf,debug,num):
    """ start radius worker """
    from toughradius import radiusd
    config = iconfig.find_config(conf)
    update_timezone(config)
    if debug:
        config.system.debug = True
    dbengine = get_engine(config)
    setup_logger(config)
    radiusd.run_worker(config,dbengine)
    reactor_run()

@click.command()
@click.option('-c','--conf', default=radius_json, help='config file')
@click.option('-f','--force', is_flag=True)
def initdb(conf,force):
    """ init database """
    from toughradius.common import initdb as init_db
    config = iconfig.find_config(conf)
    init_db.update(config,force=force)


@click.command()
@click.option('-c','--conf', default=radius_json, help='config file')
@click.option('-d','--debug', is_flag=True)
def standalone(conf,debug):
    """ start standalone mode """
    try:
        from toughradius import httpd
        from toughradius import radiusd
        from toughradius import taskd
        from toughradius.common.redis_cache import CacheManager
        config = iconfig.find_config(conf)
        update_timezone(config)
        if debug:
            config.system.debug = True
        dbengine = get_engine(config)
        cache = CacheManager(redis_conf(config),cache_name='RadiusCache')
        aes = utils.AESCipher(key=config.system.secret)
        log = setup_logger(config)
        httpd.run(config,dbengine,cache=cache,aes=aes)
        radiusd.run_auth(config)
        radiusd.run_acct(config)
        radiusd.run_worker(config,dbengine,cache=cache,aes=aes,standalone=True)
        taskd.run(config,dbengine,cache=cache,aes=aes,standalone=True)
        reactor_run()        
    except:
        traceback.print_exc()
        



@click.command()
@click.option('-c','--conf', default=radius_conf, help='daemon config file')
@click.option('-s','--signal', default='status', 
    help='daemon signal:'
    '[ start all(procname) '
    '| stop all(procname) '
    '| restart all(procname) '
    '| status '
    '| reload '
    '| shutdown ]')
@click.option('-n','--nodaemon', is_flag=True)
@click.option('-d','--debug', is_flag=True)
def daemon(conf,signal,nodaemon,debug):
    """ start daemon """
    sys.argv[0] = re.sub(r'(-script\.pyw|\.exe)?$', '', sys.argv[0])
    if signal == "startup":
        _args = ['-n',"-c",conf] if nodaemon else ["-c",conf]
        sys.exit(superd(args=_args))
    else:
        sys.exit(superctl(args=["-c",conf,signal]))



cli.add_command(manage)
cli.add_command(radiusd)
cli.add_command(task)
cli.add_command(auth)
cli.add_command(acct)
cli.add_command(worker)
cli.add_command(initdb)
cli.add_command(inittest)
cli.add_command(standalone)
cli.add_command(daemon)

if __name__ == '__main__':
    cli()







